@model Trouvaille.Models.Place

@{
    ViewBag.Title = "Create";
}

<h2>Add new Trouvaille</h2>
<div class="row">
    <div id="map" class="col-md-8" style="position: relative; width: 400px; height: 400px;"></div>
    <div class="col-md-4">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>Place</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @*<div class="form-group">
                    @Html.LabelFor(model => model.FounderId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FounderId, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FounderId, "", new { @class = "text-danger" })
                    </div>
                </div>*@

                <div class="form-group">
                    @Html.LabelFor(model => model.CountryId, "Country", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("CountryId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "md-textarea" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>
                </div>

                @*<div class="form-group">
                    @Html.LabelFor(model => model.Longtitude, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Longtitude, new { htmlAttributes = new { @class = "form-control", id = "long" } })
                        @Html.ValidationMessageFor(model => model.Longtitude, "", new { @class = "text-danger" })
                    </div>
                </div>*@

                @*<div class="form-group">
                    @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", id = "lat" } })
                        @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
                    </div>
                </div>*@

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-cloud" />
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script type="text/javascript" src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=7.0"></script>
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDrFFeTMMLaOj49X29A_qeVbsMDs97rAfQ&callback=initMap">
</script>
<script type="text/javascript">
            var map;
            var marker;
            var infowindow;
            var messagewindow;

            function initMap() {
                var uluru = { lat: -25.363, lng: 131.044 };
                var map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 4,
                    center: uluru
                });
                var marker = new google.maps.Marker({
                    position: uluru,
                    map: map
                });

                infowindow = new google.maps.InfoWindow({
                    content: document.getElementById('form')
                });

                messagewindow = new google.maps.InfoWindow({
                    content: document.getElementById('message')
                });

                google.maps.event.addListener(map, 'click', function (event) {
                    debugger;
                    marker = new google.maps.Marker({
                        position: event.latLng,
                        map: map
                    });

                    $("#lat").val(marker.getPosition().lat());
                    $("#long").val(marker.getPosition().lng());

                    google.maps.event.addListener(marker, 'click', function () {
                        debugger;
                        infowindow.open(map, marker);
                    });
                });
            }
</script>